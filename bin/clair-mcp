#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
MCP_CONFIG="$PROJECT_ROOT/claude/mcp-servers.json"

if [ ! -f "$MCP_CONFIG" ]; then
    echo "Error: MCP configuration file not found at $MCP_CONFIG"
    exit 1
fi

echo "ðŸ”„ Syncing MCP servers from $MCP_CONFIG..."

# Get list of currently configured MCP servers
CURRENT_SERVERS=$(claude mcp list | awk -F: '{print $1}' | sort)

# Get list of desired MCP servers from config
DESIRED_SERVERS=$(jq -r '.servers | keys[]' "$MCP_CONFIG" | sort)

# Remove servers that are no longer in config
while IFS= read -r server; do
    if [ -n "$server" ] && ! echo "$DESIRED_SERVERS" | grep -q "^$server$"; then
        echo "  âž– Removing MCP server: $server"
        claude mcp remove "$server"
    fi
done <<< "$CURRENT_SERVERS"

# Add or update servers from config
echo "$DESIRED_SERVERS" | while IFS= read -r server; do
    if [ -n "$server" ]; then
        COMMAND=$(jq -r ".servers[\"$server\"].command" "$MCP_CONFIG")
        ARGS=$(jq -r ".servers[\"$server\"].args[]?" "$MCP_CONFIG" 2>/dev/null || true)
        
        # Check if server already exists
        if echo "$CURRENT_SERVERS" | grep -q "^$server$"; then
            # Remove and re-add to update configuration
            echo "  ðŸ”„ Updating MCP server: $server"
            claude mcp remove "$server" 2>/dev/null || true
        else
            echo "  âž• Adding MCP server: $server"
        fi
        
        # Build command
        if [ -n "$ARGS" ]; then
            # Use -- to separate claude mcp args from server args
            claude mcp add "$server" -s user "$COMMAND" -- $ARGS
        else
            claude mcp add "$server" -s user "$COMMAND"
        fi
    fi
done

echo "âœ… MCP servers synced successfully!"
echo ""
echo "Current MCP servers:"
claude mcp list