#!/bin/bash
set -euo pipefail
# clair-status: Check the synchronization status of your configurations

# Source the helper functions
# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/clair-de-config" || {
    echo "Error: clair-de-config not properly installed. Run install.sh first."
    exit 1
}

# Status is read-only, no lock needed

# Header
echo ""
echo "╔═══════════════════════════════════════════════════════════════╗"
echo "║                   clair-de-config Status                      ║"
echo "╚═══════════════════════════════════════════════════════════════╝"
echo ""

# Change to repository directory
cd "$CLAIR_CONFIG_HOME" || {
    _clair_say error "Could not access clair-de-config directory"
    exit 1
}

# Check if git repository
if ! _clair_in_git_repo; then
    _clair_say error "Not a git repository"
    _clair_say info "Initialize with: cd $CLAIR_CONFIG_HOME && git init"
    exit 1
fi

# Repository location
_clair_say info "Repository: $CLAIR_CONFIG_HOME"

# Check remote
REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")
if [[ -n "$REMOTE_URL" ]]; then
    _clair_say info "Remote: $REMOTE_URL"
else
    _clair_say warn "No remote repository configured"
fi

echo ""

# Git status
_clair_say info "Repository Status:"
if [[ -z $(git status --porcelain) ]]; then
    _clair_say success "Working directory clean"
else
    _clair_say warn "Uncommitted changes:"
    git status --short | while read -r line; do
        echo "    $line"
    done
fi

# Check if we're up to date with remote
if [[ -n "$REMOTE_URL" ]]; then
    git fetch >/dev/null 2>&1
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u} 2>/dev/null || echo "")
    BASE=$(git merge-base @ @{u} 2>/dev/null || echo "")
    
    if [[ -n "$REMOTE" ]]; then
        if [[ "$LOCAL" = "$REMOTE" ]]; then
            _clair_say success "Up to date with remote"
        elif [[ "$LOCAL" = "$BASE" ]]; then
            _clair_say warn "Behind remote (run 'clair-sync' to update)"
        elif [[ "$REMOTE" = "$BASE" ]]; then
            _clair_say warn "Ahead of remote (run 'clair-sync --push' to upload)"
        else
            _clair_say error "Diverged from remote"
        fi
    fi
fi

echo ""

# Symlink status
_clair_say info "Configuration Links:"
check_symlink() {
    local link=$1
    local target=$2
    local name=$3
    
    if [[ -L "$link" ]]; then
        if [[ -e "$link" ]]; then
            local actual_target=$(readlink "$link")
            if [[ "$actual_target" == "$target" ]]; then
                _clair_say success "$name → Properly linked"
            else
                _clair_say warn "$name → Linked to wrong location"
                echo "      Expected: $target"
                echo "      Actual:   $actual_target"
            fi
        else
            _clair_say error "$name → Broken symlink"
        fi
    elif [[ -e "$link" ]]; then
        _clair_say error "$name → Not a symlink (regular file exists)"
    else
        _clair_say error "$name → Not installed"
    fi
}

check_symlink "$HOME/.claude/settings.json" "$CLAIR_CONFIG_HOME/claude/settings.json" "Claude settings"
check_symlink "$HOME/.claude/CLAUDE.md" "$CLAIR_CONFIG_HOME/claude/CLAUDE.md" "Claude instructions"
check_symlink "$HOME/.claude/hooks" "$CLAIR_CONFIG_HOME/claude/hooks" "Claude hooks"
check_symlink "$HOME/.claude/commands" "$CLAIR_CONFIG_HOME/claude/commands" "Claude commands"

echo ""

# Shell configuration
_clair_say info "Shell Configuration:"
check_shell_config() {
    local rc_file=$1
    local name=$2
    
    if [[ -f "$rc_file" ]]; then
        local sources_aliases=false
        local sources_env=false
        
        if grep -q "$CLAIR_CONFIG_HOME/aliases" "$rc_file"; then
            sources_aliases=true
        fi
        
        if grep -q "$CLAIR_CONFIG_HOME/.clair-de-config" "$rc_file"; then
            sources_env=true
        fi
        
        if [[ "$sources_aliases" == "true" ]] && [[ "$sources_env" == "true" ]]; then
            _clair_say success "$name sources both aliases and environment"
        elif [[ "$sources_aliases" == "true" ]]; then
            _clair_say warn "$name sources aliases but not environment"
        elif [[ "$sources_env" == "true" ]]; then
            _clair_say warn "$name sources environment but not aliases"
        else
            _clair_say warn "$name does not source clair-de-config"
        fi
    fi
}

check_shell_config "$HOME/.zshrc" ".zshrc"
check_shell_config "$HOME/.bashrc" ".bashrc"

echo ""

# Statistics
_clair_say info "Configuration Statistics:"
echo "  • Aliases: $(grep -c "^alias" "$CLAIR_CONFIG_HOME/aliases" 2>/dev/null || echo "0")"
echo "  • Claude commands: $(ls -1 "$CLAIR_CONFIG_HOME/claude/commands/"*.md 2>/dev/null | wc -l | tr -d ' ')"
echo "  • Hooks: $(ls -1 "$CLAIR_CONFIG_HOME/claude/hooks/"*.sh 2>/dev/null | wc -l | tr -d ' ')"

echo ""

# Last sync time (from git log)
LAST_COMMIT=$(git log -1 --format="%cr" 2>/dev/null || echo "")
if [[ -n "$LAST_COMMIT" ]]; then
    _clair_say info "Last commit: $LAST_COMMIT"
fi

echo ""

# Helpful commands
_clair_say info "Useful commands:"
echo "  • clair-sync              - Pull latest changes"
echo "  • clair-sync --push       - Push your changes"
echo "  • clair-add-alias         - Add a new alias"
echo "  • clair-add-alias --edit  - Edit aliases file"

echo ""